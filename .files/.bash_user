# .bash_user

# Abort if not running interactively
[[ $- == *i* ]] || return 0

# Remove the ^S ^Q mappings. See all mappings: stty -a
stty stop undef
stty start undef

# Bash settings
shopt -s cdspell         # Auto-corrects cd misspellings
shopt -s cmdhist         # Save multi-line commands in history as single line
shopt -s dotglob         # Include dotfiles in pathname expansion
shopt -s expand_aliases  # Expand aliases
shopt -s extglob         # Enable extended pattern-matching features
shopt -s histreedit      # Add failed commands to the bash history
shopt -s histappend      # Append each session's history to $HISTFILE
shopt -s histverify      # Edit a recalled history line before executing

if [[ $DISPLAY ]]; then
	shopt -s checkwinsize  # Update LINES and COLUMNS after each command
fi

export HISTSIZE=20000
export HISTFILESIZE=15000000
export HISTTIMEFORMAT='[%F %T] '
export HISTIGNORE='pwd:jobs:ll:ls:l:lf:history:c:clear'
export HISTCONTROL=ignoreboth

# Editor and pager
EDITOR=vim
if hash nvim 2>/dev/null; then
	export MANPAGER='nvim +Man!'
	EDITOR=nvim
fi
export EDITOR
export VISUAL="$EDITOR"

export PAGER=less
export LESS="-FiQMXR"
export LESSCHARSET="UTF-8"

# XDG directories
export XDG_CONFIG_HOME="$HOME/.config"
export  XDG_CACHE_HOME="$HOME/.cache"
export   XDG_DATA_HOME="$HOME/.local/share"

[ -d "$XDG_CONFIG_HOME" ] || mkdir -m 0750 "$XDG_CONFIG_HOME"
[ -d "$XDG_CACHE_HOME" ]  || mkdir -m 0750 "$XDG_CACHE_HOME"
[ -d "$XDG_DATA_HOME" ]   || mkdir -m 0750 "$XDG_DATA_HOME"

export PATH="$HOME/.local/bin:$PATH"

# Append to history and set the window title
export PROMPT_COMMAND='history -a; printf "\033k%s@%s:%s\033\\" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'

export LS_COLORS='no=00:fi=00:rs=0:di=00;34:ln=01;31:pi=01;33:so=00;33:bd=40;31;01:cd=40;37:or=01;30:mi=01;30:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:ow=38;5;154:ex=01;36:*.bat=01;37:*.btm=01;37:*.cmd=01;37:*.com=01;37:*.exe=01;37:*.iso=00;33:*.7z=01;33:*.deb=01;33:*.DEB=01;33:*.tar=01;33:*.TAR=01;33:*.tgz=01;33:*.TGZ=01;33:*.gz=01;33:*.GZ=01;33:*.bz2=01;33:*.BZ2=01;33:*.tar.xz=01;33:*.tar.gz=01;33:*.xz=01;33:*.XZ=01;33:*.lzma=01;33:*.LZMA=01;33:*.lzo=01;33:*.LZO=01;33:*.lzop=01;33:*.LZOP=01;33:*.rar=01;33:*.RAR=01;33:*.ace=01;33:*.ACE=01;33:*.zip=01;33:*.ZIP=01;33:*.gif=01;34:*.GIF=01;34:*.svg=01;34:*.SVG=01;34:*.png=01;34:*.PNG=01;34:*.jpg=01;34:*.JPG=01;34:*.jpeg=01;34:*.JPEG=01;34:*.bmp=01;34:*.BMP=01;34:*.xbm=01;34:*.XBM=01;34:*.xpm=01;34:*.XPM=01;34:*.tif=01;34:*.TIF=01;34:*.tiff=01;34:*.TIFF=01;34:*.tga=01;34:*.TGA=01;34:*.xcf=01;34:*.XCF=01;34:*.xcf.gz=01;34:*.XCF.GZ=01;34:*.blend=01;34:*.BLEND=01;34:*.pcx=01;34:*.PCX=01;34:*.ppm=01;34:*.PPM=01;34:*.ogg=00;32:*.OGG=00;32:*.ogm=00;32:*.OGM=00;32:*.flac=00;32:*.FLAC=00;32:*.ape=00;32:*.APE=00;32:*.ac3=00;32:*.AC3=00;32:*.dts=00;32:*.DTS=00;32:*.aiff=00;32:*.AIFF=00;32:*.aiffc=00;32:*.AIFFC=00;32:*.aac=00;32:*.AAC=00;32:*.mp3=00;32:*.MP3=00;32:*.fla=00;32:*.FLA=00;32:*.m4a=00;32:*.M4A=00;32:*.mid=00;32:*.MID=00;32:*.wav=00;32:*.WAV=00;32:*.au=00;32:*.nes=00;32:*.smc=00;32:*.fig=00;32:*.sfc=00;32:*.webm=00;32:*.smc.gz=00;32:*.fig.gz=00;32:*.sfc.gz=00;32:*.mkv=01;32:*.MKV=01;32:*.ogv=01;32:*.OGV=01;32:*.mp4=01;32:*.MP4=01;32:*.m4v=01;32:*.M4V=01;32:*.mpg=01;32:*.MPG=01;32:*.mpeg=01;32:*.MPEG=01;32:*.wmv=01;32:*.WMV=01;32:*.avi=01;32:*.AVI=01;32:*.mov=01;32:*.MOV=01;32:*.fli=01;32:*.FLI=01;32:*.flc=01;32:*.FLC=01;32:*.flv=01;32:*.FLV=01;32:*.swf=01;32:*.SWF=01;32:*.doc=01;37:*.docx=01;37:*.dif=01;37:*.word=01;37:*.excel=01;37:*.xls=01;37:*.xlt=01;37:*.pxl=01;37:*.slk=01;37:*.csv=01;37:*.rtf=01;37:*.pdb=01;37:*.psw=01;37:*.ppt=01;37:*.pps=01;37:*.pot=01;37:*.potm=01;37:*.pptx=01;37:*.ppsx=01;37:*.pdf=00;37:*.ps=00;37:*.txt=00;37:*.odt=00;37:*.odg=00;37:*.ods=00;37:*.ots=00;37:*.fodt=00;37:*.ott=00;37:*.uot=00;37:*.ssi=00;37:*.sti=00;37:*.ssx=00;37:*.sxc=00;37:*.sxd=00;37:*.sxw=00;37:*.stw=00;37:*.txt=00;37:*.tex=00;37:*.odp=00;37:*.otp=00;37:*.ackrc=01;35:*.asc=00;37:*.asm=01;35:*.apvlvrc=00;35:*.asoundrc=00;35:*autostart=01;31:*.awk=00;36:*.bash=00;31:*.bashrc=00;35:*.bash_profile=00;35:*.bak=01;31:*.bzr=00;36:*.c=00;35:*.cfg=00;36:*.coffee=00;36:*.conf=00;35:*COPYING=01;37:*.cpp=01;35:*.cs=01;35:*.css=01;35:*.csv=01;35:*.def=00;35:*.diff=01;33:*.dir_colors=00;37:*.dirs=00;37:*.ebuild=00;35:*.enc=00;36:*.eps=00;36:*.etx=00;36:*.ex=00;36:*.example=00;36:*.fehbg=00;36:*.fonts=00;36:*.git=00;37:*.gitconfig=00;37:*.gitignore=00;37:*.glivrc=00;35:*.gtk-bookmarks=00;37:*.gtkrc=00;37:*.gtkrc-2.0=00;37:*.go=00;35:*.h=01;34:*.hgignore=01;34:*.hgrc=01;35:*.hs=01;35:*.htm=01;35:*.html=01;35:*.htoprc=00;35:*.info=01;37:*.ini=00:*.interrobangrc=00;35:*.irbrc=00;35:*.java=01;35:*.jhtm=01;35:*.js=01;35:*.jsm=01;35:*.jsm=01;35:*.json=01;35:*.jsp=01;35:*.larswmrc=01;35:*.lisp=00;35:*.lesshst=00;37:*.log=01;37:*.lua=00;35:*.mailcap=01;31:*Makefile=00;31:*.map=01;32:*.markdown=01;32:*.md=01;37:*.mostrc=01;35:*.mkd=01;32:*.msmtprc=01;35:*.muttrc=01;35:*.nfo=01;37:*.netrc=00;35:*.o=00;34:*.offlineimaprc=01;35:*.opt=00;36:*.pacnew=01;33:*.patch=01;33:*.pentadactylrc=00;35:*.pc=00;36:*.php=00;35:*.pid=00;33:*.pl=00;31:*.pod=01;32:*.py=00;35:*.ratpoisonrc=01;35:*.rb=00;35:*.rc=01;35:*README=01;37:*.rtf=00;37:*.recently-used=00;37:*.rnd=00;33:*.sbclrc=00;35:*.sed=01;35:*.sh=00;31:*.signature=01;33:*.spec=00;37:*.stumpwmrc=01;35:*.t=01;37:*.tcl=01;35:*.tdy=01;35:*.textile=01;35:*.theme=00;37:*viminfo=00;37:*.xml=01;35:*.yml=01;35:*.yaml=01;35:*.zcompdump=00;35:*.zlogin=00;35:*.zwc=01;35:*.zsh=01;31:*.zshrc=00;35:*.ttytterrc=00;35:*.urlview=00:*.vim=01;35:*.vimperatorrc=00;35:*vimrc=00;35:*.xinitrc=00;35:*xinitrc=00;35:*.Xauthority=01;35:*.Xdefaults=01;35:*Xdefaults=01;35:*xdefaults=01;35:*.Xmodmap=01;35:*.xmodmap=01;35:*.Xresources=01;35:*Xresources=01;35:*xresources=01;35:'

if hash lf 2>/dev/null; then
	export LF_ICONS="\
di=:fi=:ln=:or=:ex=:*.c=:*.cc=:*.clj=:*.coffee=:*.cpp=:*.css=\
:*.d=:*.dart=:*.erl=:*.exs=:*.fs=:*.go=:*.h=:*.hh=:*.hpp=:*.hs=\
:*.html=:*.java=:*.jl=:*.js=:*.json=:*.lua=:*.md=:*.php=:*.pl=\
:*.pro=:*.py=:*.rb=:*.rs=:*.scala=:*.ts=:*.vim=:*.cmd=:*.ps1=\
:*.sh=:*.bash=:*.zsh=:*.fish=:*.tar=:*.tgz=:*.arc=:*.arj=:*.taz=\
:*.lha=:*.lz4=:*.lzh=:*.lzma=:*.tlz=:*.txz=:*.tzo=:*.t7z=:*.zip=\
:*.z=:*.dz=:*.gz=:*.lrz=:*.lz=:*.lzo=:*.xz=:*.zst=:*.tzst=:*.bz2=\
:*.bz=:*.tbz=:*.tbz2=:*.tz=:*.deb=:*.rpm=:*.jar=:*.war=:*.ear=\
:*.sar=:*.rar=:*.alz=:*.ace=:*.zoo=:*.cpio=:*.7z=:*.rz=:*.cab=\
:*.wim=:*.swm=:*.dwm=:*.esd=:*.jpg=:*.jpeg=:*.mjpg=:*.mjpeg=:*.gif=\
:*.bmp=:*.pbm=:*.pgm=:*.ppm=:*.tga=:*.xbm=:*.xpm=:*.tif=:*.tiff=\
:*.png=:*.svg=:*.svgz=:*.mng=:*.pcx=:*.mov=:*.mpg=:*.mpeg=:*.m2v=\
:*.mkv=:*.webm=:*.ogm=:*.mp4=:*.m4v=:*.mp4v=:*.vob=:*.qt=:*.nuv=\
:*.wmv=:*.asf=:*.rm=:*.rmvb=:*.flc=:*.avi=:*.fli=:*.flv=:*.gl=\
:*.dl=:*.xcf=:*.xwd=:*.yuv=:*.cgm=:*.emf=:*.ogv=:*.ogx=:*.aac=\
:*.au=:*.flac=:*.m4a=:*.mid=:*.midi=:*.mka=:*.mp3=:*.mpc=:*.ogg=\
:*.ra=:*.wav=:*.oga=:*.opus=:*.spx=:*.xspf=:*.pdf=:\
"
fi

# Look for terminfo files under data
if [ -d "$XDG_CONFIG_HOME/terminfo" ]; then
	export TERMINFO="$XDG_CONFIG_HOME/terminfo"
	export TERMINFO_DIRS="$XDG_CONFIG_HOME/terminfo:/usr/share/terminfo"
fi

# SSH with common TERM and passing USER who is ssh'ing
ssh() {
	if [ -n "$TMUX" ]; then
		TERM=screen-256color
	else
		TERM=xterm
	fi
	export LC_IDENTIFICATION="${LC_IDENTIFICATION:-$USER}"
	command ssh -o SendEnv=LC_IDENTIFICATION "$@"
}

# Enable readline vi-mode for myself only
if [ "${LC_IDENTIFICATION:-$USER}" = rafi ] \
	|| [[ "${LC_IDENTIFICATION:-$USER}" == rafael* ]]
then
	set -o vi
fi

export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/rc"

export FZF_DEFAULT_OPTS="--bind=ctrl-d:page-down,ctrl-u:page-up,ctrl-y:yank,tab:down,btab:up --inline-info --reverse --height 50%"
export FZF_DEFAULT_COMMAND="rg --hidden --files --glob '!.git' --color=never"

# See https://github.com/junegunn/fzf
if [ -f "$XDG_CONFIG_HOME/key-bindings.bash" ]; then
	. "$XDG_CONFIG_HOME/key-bindings.bash"
fi

# Setup fast colorful prompt display
eval "$(starship init bash)"

# Archlinux loads bash completions from /etc automatically
# https://wiki.archlinux.org/index.php/Bash#Configuration_files
# Deal with other operating-systems
if [[ "$OSTYPE" == "darwin"* ]]; then
	# macOS Homebrew bash completions
	if [[ -f /usr/local/etc/profile.d/bash_completion.sh ]]; then
		. /usr/local/etc/profile.d/bash_completion.sh
	fi
elif [ -f /etc/lsb-release ]; then
	# Ubuntu/Debian manual bash completions loading
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	fi
fi

# Must be loaded _after_ setting PROMPT_COMMAND
if command -v zoxide 1>/dev/null 2>&1; then
	export _ZO_DATA_DIR="$XDG_CACHE_HOME/zoxide"
	export _ZO_ECHO=1
	eval "$(zoxide init bash)"
fi

# carry on aliases
alias sudo='sudo '
alias watch='watch '

# list utils
alias ls="LC_COLLATE=C ls --color=auto --group-directories-first"
alias l='ls -CFa'
alias ll='ls -alF'
alias llh='ls -alFh'
alias lld='ls -Gal --color=always | grep ^d --colour=never'

# find
alias grep='grep --color=auto --exclude-dir=.git'
alias tree='tree -F --dirsfirst -a -I ".git|.hg|.svn|__pycache__|.mypy_cache|.pytest_cache|*.egg-info|.sass-cache|.DS_Store"'
alias tree2='tree -L 2'
alias tree3='tree -L 3'

if ! hash fd 2>/dev/null; then
	alias f='find . -iname '
else
	alias f=fd
fi

# git
if ! hash git 2>/dev/null; then
	alias g=git
	alias gcd='cd "$(git rev-parse --show-toplevel)"'
	alias gd='git diff'
	alias gds='git diff --cached'
	alias gfl='git fetch --prune && git lg -15'
	alias gf='git fetch --prune'
	alias gfa='git fetch --all --tags --prune'
	alias gap='git add -p'
	alias gai='git add -i'
	alias gs='git status -sb'
	alias gl='git lg -15'
	alias gll='git lg'
	alias gld='git lgd -15'
	if type _git &> /dev/null; then
		complete -o default -o nospace -F _git g
	fi
fi

# docker
alias dps='docker ps --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{ .Ports }}\\t{{.RunningFor}}\\t{{.Command}}\\t{{ .ID }}" | cut -c-$(tput cols)'
alias dls='docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{ .Ports }}\\t{{.RunningFor}}\\t{{.Command}}\\t{{ .ID }}" | cut -c-$(tput cols)'
alias dim='docker images --format "table {{.Repository}}\\t{{.Tag}}\\t{{.ID}}\\t{{.Size}}\\t{{.CreatedSince}}"'
alias dip='docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"'
alias dgc='docker rmi $(docker images -qf "dangling=true")'
alias dvc='docker volume ls -qf dangling=true | xargs docker volume rm'
alias dtop='docker stats $(docker ps --format="{{.Names}}")'

# misc helpers
alias c=clear
alias grep='grep --color=auto --exclude-dir=.git'
alias dut='du -hsx * | sort -rh | head -10'
alias freq='cut -f1 -d" " "$HISTFILE" | sort | uniq -c | sort -nr | head -n 30'
alias ipinfo='curl -s ipinfo.io | jq .'
hash colordiff 2>/dev/null && alias diff=colordiff

mk() { mkdir -p "$@" && cd "$1"; }

# vim
if type nvim &> /dev/null; then
	alias vim=nvim
	alias suvim='sudo -E nvim'
else
	alias nvim=vim
	alias suvim='sudo -E vim'
fi
alias v='vim $(fzf)'
alias vi=vim
alias ve='tmux split-window -h "$EDITOR"'
alias vimdiff='vim -d'

# Jump around
alias cdf='cd "$(dirname "$(fzf)")"'
alias cdd='cd "$(fd --type d | fzf)"'

# Jump to previous directory with --
alias -- -="cd -"

# Easier directory navigation
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'

# IP addresses
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias iplocal="ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ipremote="ip route get 1 | awk '{print \$NF;exit}'"

function ippublic() {
	if type dig &> /dev/null; then
		dig +short myip.opendns.com @resolver1.opendns.com
	else
		curl http://ifconfig.me/ip
	fi
}

# Certificates
ssl-info() {
	openssl s_client \
			-servername "$1" \
			-connect "$1":443 </dev/null 2>&1 \
		| openssl x509 -noout -issuer -subject -fingerprint -serial -dates
}

# Quickly grep a process
function psg() {
	ps auxww | grep -i --color=always "$@" | grep -v "grep.*$@"
}

# Filter and process with fzf and kill it
function psk() {
	(date; ps -ef) | fzf \
		--bind='ctrl-r:reload(date; ps -ef)' \
		--header=$'Press CTRL-R to reload\n\n' --header-lines=2 \
		--preview='echo {}' --preview-window=down,3,wrap \
		--layout=reverse --height=80% | awk '{print $2}' | xargs kill -9
}

# Select command name with fzf and show memory usage
function psmem() {
	ps -o rss= -p "$(pidof "$(ps -ec | fzf | awk '{print $4}')")" \
		| awk '{print $1*4, "KiB"}'
}

# Top 15 cpu heavy process
function topcpu() {
	ps -ceo pmem,pid,pcpu,rss,vsz,time,command \
		| awk 'NR<2{print $0;next}{print $0| "sort -k 3 -r"}' | head -15
}

# Top 15 memory heavy process
function topmem() {
	ps -ceo pmem,pid,pcpu,rss,vsz,time,command | sort -k 1 -r | head -15 \
		| awk '
				function human(x) {
					if (x < 1000) { return x }
					x /= 1024;
					s = "MGTEPYZ";
					while (x >= 1000 && length(s) > 1) {
						x /= 1024;
						s = substr(s, 2)
					}
					return int(x + 0.5) substr(s, 1, 1)
				}
				{
					if (NR > 1) {
						sub($4, human($4));
						sub($5, human($5));
					}
					print
				}'
}

# Kubernetes helpers
# ---
# Formatting output: https://kubernetes.io/docs/reference/kubectl/overview/#formatting-output
# JSONPath support: https://kubernetes.io/docs/reference/kubectl/jsonpath/

# kubernetes
alias k=kubectl

kubectl_completion=/usr/share/bash-completion/completions/kubectl
[ -f "$kubectl_completion" ] && . "$kubectl_completion"
unset kubectl_completion

if type __start_kubectl &> /dev/null; then
	complete -o default -F __start_kubectl k
fi

# Display Pod workload information
alias kp='kubectl get pods -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,RESTARTS:.status.containerStatuses[*].restartCount,M_REQUESTS:.spec.containers[*].resources.requests.memory,M_LIMITS:.spec.containers[*].resources.limits.memory,NODE_IP:.status.hostIP,POD_IP:.status.podIP'

# Display Pod's images
alias kpi='kubectl get pods -o custom-columns=POD:.metadata.name,IMAGES:.spec..image'

alias kpisum="kubectl get pods --all-namespaces -o jsonpath=\"{.items[*]['spec.containers', 'spec.initContainers'][*].image}\" | tr -s '[[:space:]]' '\n' | sort | uniq -c | sort -nr"

alias kpnames='kubectl get pod -o jsonpath="{..spec['"'"'containers'"'"','"'"'initContainers'"'"'][*].name}"'

# Display in-depth Ingress objects
alias kingress='kubectl get ingress -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,CLASS:.metadata.annotations.kubernetes\.io/ingress\.class,HOSTS:.spec.rules[*].host,PATHS:.spec.rules[*].http.paths[*].path"'

alias kingress-wide='kubectl get ingress -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,CLASS:.metadata.annotations.kubernetes\.io/ingress\.class,HOSTS:.spec.rules[*].host,PATHS:.spec.rules[*].http.paths[*].path,SERVICES:.spec.rules[*].http.paths[*].backend.serviceName,PORTS:.spec.rules[*].http.paths[*].backend.servicePort"'

# Show recent Pod termination states
alias krestarts='kubectl get pod -o=custom-columns=NAME:.metadata.name,RESTARTS:..restartCount,REASON:..reason,EXIT_CODE:..lastState.terminated.exitCode,LAST_RESTART_TIME:..lastState.terminated.finishedAt,MEMORY_LIMIT:..resources.limits.memory --sort-by="{..lastState.terminated.finishedAt}"'

# Non-ready Pod list
alias knotready='kubectl get pod --no-headers --field-selector=status.phase!=Running'

# Wide informative Node list
alias knode='kubectl get node -owide'

# Order events by creation timestamp
alias kevents='kubectl get events --sort-by=.metadata.creationTimestamp'

# Show events by specific resource name, use with -A or -n
kobjevents() {
	local obj="${1}"
	shift
	kubectl get event \
		--field-selector "involvedObject.name=${obj}" \
		--sort-by=.metadata.creationTimestamp "$@"
# involvedObject.kind=Pod,
#  --sort-by='.lastTimestamp'
}

# Show human-readble init/containers status for specific Pod
alias kcontainerstatus='kubectl get pod -o go-template --template='"'"'Pod: {{.metadata.name}}{{"\n"}}---{{"\n"}}Containers:{{"\n"}}{{range .status.containerStatuses}}  {{.name}} {{range $key, $state := .state}}  {{$key}}{{if $state.reason}}/{{$state.reason}}{{end}}{{if $state.exitCode}}/{{$state.exitCode}}{{end}}{{end}}{{if lt 0 .restartCount}}  ({{.restartCount}} restarts){{end}}{{"\n"}}{{end}}{{if .status.initContainerStatuses }}Init containers:{{"\n"}}{{range .status.initContainerStatuses}}  {{.name}} {{range $key, $state := .state}}  {{$key}}{{if $state.reason}}/{{$state.reason}}{{end}}{{if $state.exitCode}}/{{$state.exitCode}}{{end}}{{end}}{{if lt 0 .restartCount}}  ({{.restartCount}} restarts){{end}}{{"\n"}}{{end}}{{end}}'"'"

# Use https://github.com/cykerway/complete-alias for bash alias completion
if [ "$(type -t _complete_alias)" = function ]; then
	complete -F _complete_alias kcontainerstatus
fi

# Show cpu/memory matrix for pods, use with -A or -n
kstats() {
	local COLS="NAME:.metadata.name"
	COLS="$COLS,CPU_REQ(cores):.spec.containers[*].resources.requests.cpu"
	COLS="$COLS,MEMORY_REQ(bytes):.spec.containers[*].resources.requests.memory"
	COLS="$COLS,CPU_LIM(cores):.spec.containers[*].resources.limits.cpu"
	COLS="$COLS,MEMORY_LIM(bytes):.spec.containers[*].resources.limits.memory"

	local top; top="$(kubectl top pods "$@")"
	local pods; pods="$(kubectl get pods -o custom-columns="$COLS" "$@")"

	join -a1 -a2 -o 0,1.2,1.3,2.2,2.3,2.4,2.5, -e '<none>' \
		<(echo "$top") <(echo "$pods") | column -t -s' '
}

# Live tail with fzf and exec into selected
ktail() {
	read -ra tokens < <(
		kubectl get pods --all-namespaces |
			fzf --info=inline --layout=reverse --header-lines=1 --border \
					--prompt "$(kubectl config current-context | sed 's/-context$//')> " \
					--header $'Press CTRL-O to open log in editor\n\n' \
					--bind ctrl-/:toggle-preview \
					--bind 'ctrl-o:execute:${EDITOR:-vim} <(kubectl logs --namespace {1} {2}) > /dev/tty' \
					--preview-window down,follow \
					--preview 'kubectl logs -f --tail=100 --namespace {1} {2}' "$@"
	)
	[ ${#tokens} -gt 1 ] &&
		kubectl exec -it --namespace "${tokens[0]}" "${tokens[1]}" -- bash
}

#  vim: set ft=sh ts=2 sw=2 tw=80 noet :
