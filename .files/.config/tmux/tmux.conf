# tmux 3.x
# ---

# Behavior
#-------------------------------------------------

# Update SSH_TTY when re-attaching.
set -ga update-environment "SSH_TTY"

# Set shell and terminfo.
set -g default-shell "${SHELL}"
set -g default-terminal "${TERM}"
# set -g default-terminal "screen-256color"

set -g set-titles off
set -g set-titles-string '#T #W'
set -wg clock-mode-style 24

setw -g automatic-rename on
setw -g xterm-keys on

# Always honor extended keys, fixes Alacritty mods.
set-option -sa extended-keys always

# Enable cursor shape modification in vim without Ptmux wrap
# See https://github.com/neovim/neovim/wiki/FAQ
set-option -sa terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Enable 24-bit color support (check if this works via `tmux info | grep Tc`)
set-option -sa terminal-overrides ",*:Tc"

# Add Undercurl (test it with `printf '\e[4:3mUndercurl\n\e[0m'`)
set-option -sa terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Add colored undercurl (test it with `printf '\e[4:3;58:2:255:100:0mUndercurl\n\e[0m'`)
set-option -sa terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# scrollback buffer size increase
set -g history-limit 20000

# Limit buffer stack
set -g buffer-limit 20

# Address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# tmux messages are displayed for 2 seconds
set -g display-time 2000

# Allow the arrow key to be used immediately after changing windows, default is 500
set -g repeat-time 300

# focus events enabled for terminals that support them
set -g focus-events on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Renumber windows automatically
set -g renumber-windows on

# Start windows and panes from 1
set -g base-index 1
setw -g pane-base-index 1

# Visual notifications
set -g visual-bell off
set -g visual-activity off
set -g visual-silence off

# Window Monitoring
setw -g monitor-activity on
setw -g monitor-silence 0

# Key bindings
#-------------------------------------------------

# Act like GNU screen, use C-a instead of C-b
unbind C-b
set -g prefix C-a

# In nested tmux clients, send prefix with C-a C-a, or C-a a
bind-key C-a send-prefix

# Open new window from current path
bind c new-window -c "#{pane_current_path}"

# Create new session
bind N new-session

# Link window from different session/window
bind L command-prompt -p "Link window from (session:window):" "link-window -s %% -a"

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with:" \
  "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Window monitoring for activity and silence
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
  'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
  'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Kill a session
bind D choose-tree -sf "kill-session -t '%%'"

# Use v and g for splitting from current path
unbind %
unbind '"'
bind g split-window -h -c "#{pane_current_path}"
bind v split-window -v -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Session navigation
bind n switch-client -n
bind p switch-client -p

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Window navigation with Meta+h/l/left/right
bind -n M-h previous-window
bind -n M-l next-window
bind -n M-Left previous-window
bind -n M-Right next-window

# Window Re-order
bind -n M-< swap-window -d -t -1
bind -n M-> swap-window -d -t +1

# Pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

%if "#{==:$SSH_TTY,}"
  # Smart pane switching with awareness of vim splits.
  # See: https://github.com/christoomey/vim-tmux-navigator
  is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
  bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
  bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
  bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
  bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
  tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
  if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
  if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

  # Bring back clear screen under tmux prefix
  bind C-l send-keys 'C-l'

  bind -T copy-mode-vi 'C-h' select-pane -L
  bind -T copy-mode-vi 'C-j' select-pane -D
  bind -T copy-mode-vi 'C-k' select-pane -U
  bind -T copy-mode-vi 'C-l' select-pane -R
  bind -T copy-mode-vi 'C-\' select-pane -l

  bind C-h send-keys 'C-h'
  bind C-j send-keys 'C-j'
  bind C-k send-keys 'C-k'
  bind C-l send-keys 'C-l'

%else
  bind -n C-h select-pane -L
  bind -n C-j select-pane -D
  bind -n C-k select-pane -U
  bind -n C-l select-pane -R
%endif

# Toggle synchronized input to all panes in current window
# bind S setw synchronize-panes
bind S setw synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# Quick layout shortcuts
bind b setw main-pane-width 90\; select-layout main-vertical
bind B setw main-pane-height 30\; select-layout main-horizontal

# Use a tick for renaming the window prompt
bind r command-prompt -I '#W' -p '(rename window)' "rename-window '%%'"
bind R command-prompt -I '#S' -p '(rename session)' "rename-session '%%'"

# Open a man page in new vertical pane
bind / command-prompt -p 'Man>' "split-window -d -v 'exec man %%'"

# Help screen: rebind list-keys window into a new pane
bind ? split-window -h 'tmux list-keys | less'

# Force a reload of the config file
bind C-r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Config reloaded"

bind * list-clients


# Disable Ctrl+Arrows to maintain word jump
unbind -n C-Left
unbind -n C-Right
unbind -n C-Up
unbind -n C-Down

# Control
#-------------------------------------------------

# bind vi key-mapping
set -g status-keys vi

# vi-style controls for copy mode
setw -g mode-keys vi

# Allows scrolling and selecting in copy-mode
set -g -q mouse on

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

# enable OSC 52 clipboard
# https://medium.freecodecamp.org/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b
set -g set-clipboard on

# Setup copy-mode vi bindings
unbind -Tcopy-mode-vi Enter
bind Escape copy-mode
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi V send -X select-line
bind -Tcopy-mode-vi C-v send -X rectangle-toggle
bind -Tcopy-mode-vi Escape send -X clear-selection

# Yank
# bind -T copy-mode-vi D send-keys -X copy-end-of-line
if-shell 'test "$(uname -s)" = Darwin' {
  %hidden yank="pbcopy"
  bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi Y send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
}
if-shell 'which xclip' {
  %hidden yank="xclip -i -selection clipboard"
  bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi Y send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
}

%if "#{!=:$SSH_TTY,}"
  %hidden yank="~/.config/tmux/scripts/yank.sh"
  bind -Tcopy-mode-vi y send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi Y send -X begin-selection \; send -X end-of-line \; send -X cursor-left \; send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
  bind -Tcopy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$yank"
%endif

# Look 'n Feel
# ---
set -g status on
set -g status-position bottom
set -g status-interval 5

set -g pane-border-style fg=#81A1C1
set -g pane-active-border-style fg=#88C0D0
set -g message-style fg=#3B4252,bg=#81A1C1
set -g message-command-style fg=#3B4252,bg=#81A1C1

set -g status-left-style none
set -g status-left-length 100
set -g status-left "#[fg=colour246,bg=colour238] #S #{?client_prefix,#[bg=colour2],#[bg=colour244]}#[fg=colour238,nobold,nounderscore,noitalics]#[fg=colour236] #(whoami) #[fg=colour244,bg=default,nobold,nounderscore,noitalics]"

set -g status-right-style none
set -g status-right-length 100
set -g status-right "#[fg=colour242,nobold,nounderscore,noitalics]#[fg=colour236,bg=colour242] #h "

set -g status-justify "centre"
set -g status-style none,bg=colour236
setw -g window-status-separator ""
setw -g window-status-style fg=colour250,bg=colour236,none
setw -g window-status-format "#[fg=colour236,bg=#4C566A,nobold,nounderscore,noitalics]#[fg=default] #I  #W #[fg=#4C566A,bg=colour236,nobold,nounderscore,noitalics]"
setw -g window-status-current-format "#[fg=colour236,bg=#81A1C1,nobold,nounderscore,noitalics]#[fg=#3B4252,bg=#81A1C1] #I  #W #[fg=#81A1C1,bg=default,nobold,nounderscore,noitalics]"
setw -g window-status-activity-style none,fg=#88C0D0,bg=#4C566A

# set -g status-bg black
# set -g status-fg colour243
# set -g mode-bg colour67
# set -g mode-fg colour235
# set -g pane-border-fg colour240
# set -g pane-active-border-fg colour6
# set -g window-status-bg black
# set -g window-status-current-bg colour239
# set -g window-status-current-fg colour250
# set -g window-status-current-attr bold
# set -g window-status-activity-attr bold
# setw -g window-status-activity-bg colour234
# setw -g window-status-activity-fg brightblue
# set -g status-left-length 30
# set -g status-left '#{?client_prefix,#[bg=green]#[fg=black],#[fg=red]}(#S) #(whoami)'
# set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'

#  vim: set ft=tmux ts=2 sw=2 tw=80 noet :
